import csv
import datetime
import random

# Listas y variables globales
lista_usuarios_registrados = []  # Lista para almacenar usuarios registrados
lista_parqueadero = []  # Lista de veh√≠culos actualmente en el parqueadero
lista_vehiculos_retirados = []  # Lista de veh√≠culos que han salido
espacios_disponibles = [f"P{n+1}" for n in range(50)]  # Espacios de parqueo disponibles (50)
admin_credenciales = {"campusparking": "12345"}  # Usuario y contrase√±a de administrador

# Funci√≥n para registrar usuario
def registrar_usuario(nombre, apellido, documento, placa):
    """
    Registra un nuevo usuario con validaciones de nombre, apellido, documento y placa.
    """
    dic_usuario = {}
    errores = []

    # Validar nombre
    if len(nombre) < 3 or any(c.isdigit() for c in nombre):
        errores.append("Nombre inv√°lido (m√≠nimo 3 letras, sin n√∫meros).")
    # Validar apellido
    if len(apellido) < 3 or any(c.isdigit() for c in apellido):
        errores.append("Apellido inv√°lido (m√≠nimo 3 letras, sin n√∫meros).")
    # Validar documento
    if not (3 <= len(documento) <= 15) or not documento.isdigit():
        errores.append("Documento inv√°lido (3-15 d√≠gitos num√©ricos).")
    # Validar placa
    if len(placa) != 6 or not (placa[:3].isalpha() and placa[3:].isdigit()):
        errores.append("Placa inv√°lida (formato ABC123).")

    if errores:
        return False, errores  # Devolver errores si hay

    dic_usuario = {
        "nombre": nombre,
        "apellido": apellido,
        "documento": documento,
        "placa": placa.upper()
    }
    return True, dic_usuario  # Usuario registrado exitosamente

# Funci√≥n para ingresar veh√≠culo
def ingresar_vehiculo():
    """
    Ingresa un veh√≠culo al parqueadero si el usuario est√° registrado y hay espacios.
    """
    documento = input("Documento: ")
    placa = input("Placa (ABC123): ").upper()
    
    # Verificar si el usuario est√° registrado
    usuario = next((u for u in lista_usuarios_registrados if u['documento'] == documento and u['placa'] == placa), None)
    if not usuario:
        print("Usuario o veh√≠culo no registrado.")
        return

    # Verificar si el veh√≠culo ya est√° en el parqueadero
    if any(v['Placa'] == placa for v in lista_parqueadero):
        print("Veh√≠culo ya est√° en el parqueadero.")
        return

    # Verificar disponibilidad de espacios
    if not espacios_disponibles:
        print("No hay espacios disponibles.")
        return

    # Asignar espacio y registrar ingreso
    espacio = espacios_disponibles.pop(0)
    hora_ingreso = datetime.datetime.now()
    registro = {
        "Placa": placa,
        "Usuario": usuario,
        "Espacio": espacio,
        "HoraIngreso": hora_ingreso
    }
    lista_parqueadero.append(registro)
    print(f"‚úÖ Veh√≠culo ingresado. Espacio asignado: {espacio}")

# Funci√≥n para retirar veh√≠culo
def retirar_vehiculo():
    """
    Retira un veh√≠culo del parqueadero y calcula el cobro seg√∫n el tiempo de permanencia.
    """
    placa = input("Ingrese la placa: ").upper()
    
    # Buscar veh√≠culo en el parqueadero
    registro = next((v for v in lista_parqueadero if v['Placa'] == placa), None)
    if not registro:
        print("Veh√≠culo no est√° en el parqueadero.")
        return

    # Calcular tiempo y cobro
    hora_salida = datetime.datetime.now()
    tiempo = hora_salida - registro['HoraIngreso']
    horas = tiempo.seconds // 3600
    minutos = (tiempo.seconds % 3600) // 60
    cuartos = minutos // 15
    cobro = max(7000, horas*7000 + cuartos*1500)  # Cobro m√≠nimo una hora

    # Actualizar listas y liberar espacio
    lista_parqueadero.remove(registro)
    espacios_disponibles.append(registro['Espacio'])
    lista_vehiculos_retirados.append({
        "Placa": placa,
        "HoraIngreso": registro['HoraIngreso'].strftime('%Y-%m-%d %H:%M:%S'),
        "HoraSalida": hora_salida.strftime('%Y-%m-%d %H:%M:%S'),
        "Tiempo": f"{horas}h {minutos}min",
        "Cobro": cobro
    })
    print(f"‚úÖ Veh√≠culo retirado. Total a pagar: ${cobro}")

# Exportar datos a CSV
def exportar_csv():
    """
    Exporta la informaci√≥n de usuarios y veh√≠culos retirados a un archivo CSV.
    """
    try:
        with open("resumen_parqueadero.csv", mode="w", newline="", encoding="utf-8") as archivo_csv:
            writer = csv.writer(archivo_csv, delimiter=';')  # Usar ; como separador

            # Encabezado general
            writer.writerow(["--- RESUMEN DEL PARQUEADERO ---"])
            writer.writerow(["Total usuarios registrados", len(lista_usuarios_registrados)])
            writer.writerow(["Total vehiculos en parqueadero", len(lista_parqueadero)])
            writer.writerow(["Total vehiculos retirados", len(lista_vehiculos_retirados)])

            total_pago = sum(v['Cobro'] for v in lista_vehiculos_retirados)
            writer.writerow(["Total dinero recibido", f"${total_pago}"])
            writer.writerow([])  # L√≠nea en blanco

            # Detalle de usuarios registrados
            writer.writerow(["Usuarios registrados:"])
            writer.writerow(["Nombre", "Apellido", "Documento", "Placa"])
            for u in lista_usuarios_registrados:
                writer.writerow([u['nombre'], u['apellido'], u['documento'], u['placa']])
            writer.writerow([])  # L√≠nea en blanco

            # Detalle de veh√≠culos retirados
            writer.writerow(["Vehiculos retirados:"])
            for v in lista_vehiculos_retirados:
                writer.writerow([f"Placa: {v['Placa']}"])  # Mostrar placa primero
                writer.writerow(["Hora de ingreso", v['HoraIngreso']])
                writer.writerow(["Hora de salida", v['HoraSalida']])
                writer.writerow(["Tiempo total", v['Tiempo']])
                writer.writerow(["Total pagado", f"${v['Cobro']}"])
                writer.writerow([])  # L√≠nea en blanco para separar cada veh√≠culo

        print("‚úÖ Archivo 'resumen_parqueadero.csv' exportado correctamente.")
    except Exception as e:
        print(f"‚ùå Error al exportar CSV: {e}")

# Funci√≥n administrador
def admin_menu():
    """
    Acceso al panel de administraci√≥n para ver reportes generales.
    """
    usuario = input("Usuario admin: ")
    contrasena = input("Contrase√±a: ")
    
    # Verificar credenciales
    if admin_credenciales.get(usuario) != contrasena:
        print("‚ùå Acceso denegado.")
        return

    # Mostrar reportes
    print("\n--- PANEL DE ADMINISTRACI√ìN ---")
    print(f"Usuarios registrados: {len(lista_usuarios_registrados)}")
    print(f"Veh√≠culos en parqueadero: {len(lista_parqueadero)}")
    print(f"Veh√≠culos retirados: {len(lista_vehiculos_retirados)}")

# Men√∫ principal
def menu():
    """
    Muestra el men√∫ principal y gestiona las opciones seleccionadas.
    """
    while True:
        print("\n--- CAMPUS PARKING ---")
        print("1. Registrar usuario")
        print("2. Ingresar veh√≠culo")
        print("3. Retirar veh√≠culo")
        print("4. Administrador")
        print("5. Salir y exportar CSV")
        
        opcion = input("Seleccione opci√≥n: ")

        if opcion == "1":
            nombre = input("Nombre: ")
            apellido = input("Apellido: ")
            documento = input("Documento: ")
            placa = input("Placa (ABC123): ")
            exito, resultado = registrar_usuario(nombre, apellido, documento, placa)
            if exito:
                lista_usuarios_registrados.append(resultado)
                print("‚úÖ Usuario registrado correctamente.")
            else:
                print("‚ùå Errores encontrados:")
                for e in resultado:
                    print(f"- {e}")
        elif opcion == "2":
            ingresar_vehiculo()
        elif opcion == "3":
            retirar_vehiculo()
        elif opcion == "4":
            admin_menu()
        elif opcion == "5":
            exportar_csv()
            print("üëã Saliendo del sistema. ¬°Gracias por usar CAMPUS PARKING!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

# Inicia el programa
if __name__ == "__main__":
    menu()

